// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"jocer/internal/storage/ent/jock"
	"jocer/internal/storage/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JockDelete is the builder for deleting a Jock entity.
type JockDelete struct {
	config
	hooks    []Hook
	mutation *JockMutation
}

// Where appends a list predicates to the JockDelete builder.
func (jd *JockDelete) Where(ps ...predicate.Jock) *JockDelete {
	jd.mutation.Where(ps...)
	return jd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jd *JockDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, JockMutation](ctx, jd.sqlExec, jd.mutation, jd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jd *JockDelete) ExecX(ctx context.Context) int {
	n, err := jd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jd *JockDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jock.Table, sqlgraph.NewFieldSpec(jock.FieldID, field.TypeUUID))
	if ps := jd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jd.mutation.done = true
	return affected, err
}

// JockDeleteOne is the builder for deleting a single Jock entity.
type JockDeleteOne struct {
	jd *JockDelete
}

// Where appends a list predicates to the JockDelete builder.
func (jdo *JockDeleteOne) Where(ps ...predicate.Jock) *JockDeleteOne {
	jdo.jd.mutation.Where(ps...)
	return jdo
}

// Exec executes the deletion query.
func (jdo *JockDeleteOne) Exec(ctx context.Context) error {
	n, err := jdo.jd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jock.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jdo *JockDeleteOne) ExecX(ctx context.Context) {
	if err := jdo.Exec(ctx); err != nil {
		panic(err)
	}
}
