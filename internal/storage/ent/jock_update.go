// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"jocer/internal/storage/ent/jock"
	"jocer/internal/storage/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JockUpdate is the builder for updating Jock entities.
type JockUpdate struct {
	config
	hooks    []Hook
	mutation *JockMutation
}

// Where appends a list predicates to the JockUpdate builder.
func (ju *JockUpdate) Where(ps ...predicate.Jock) *JockUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetName sets the "name" field.
func (ju *JockUpdate) SetName(s string) *JockUpdate {
	ju.mutation.SetName(s)
	return ju
}

// SetContent sets the "content" field.
func (ju *JockUpdate) SetContent(s string) *JockUpdate {
	ju.mutation.SetContent(s)
	return ju
}

// Mutation returns the JockMutation object of the builder.
func (ju *JockUpdate) Mutation() *JockMutation {
	return ju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, JockMutation](ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JockUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JockUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JockUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JockUpdate) check() error {
	if v, ok := ju.mutation.Name(); ok {
		if err := jock.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Jock.name": %w`, err)}
		}
	}
	return nil
}

func (ju *JockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jock.Table, jock.Columns, sqlgraph.NewFieldSpec(jock.FieldID, field.TypeUUID))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Name(); ok {
		_spec.SetField(jock.FieldName, field.TypeString, value)
	}
	if value, ok := ju.mutation.Content(); ok {
		_spec.SetField(jock.FieldContent, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JockUpdateOne is the builder for updating a single Jock entity.
type JockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JockMutation
}

// SetName sets the "name" field.
func (juo *JockUpdateOne) SetName(s string) *JockUpdateOne {
	juo.mutation.SetName(s)
	return juo
}

// SetContent sets the "content" field.
func (juo *JockUpdateOne) SetContent(s string) *JockUpdateOne {
	juo.mutation.SetContent(s)
	return juo
}

// Mutation returns the JockMutation object of the builder.
func (juo *JockUpdateOne) Mutation() *JockMutation {
	return juo.mutation
}

// Where appends a list predicates to the JockUpdate builder.
func (juo *JockUpdateOne) Where(ps ...predicate.Jock) *JockUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JockUpdateOne) Select(field string, fields ...string) *JockUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Jock entity.
func (juo *JockUpdateOne) Save(ctx context.Context) (*Jock, error) {
	return withHooks[*Jock, JockMutation](ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JockUpdateOne) SaveX(ctx context.Context) *Jock {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JockUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JockUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JockUpdateOne) check() error {
	if v, ok := juo.mutation.Name(); ok {
		if err := jock.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Jock.name": %w`, err)}
		}
	}
	return nil
}

func (juo *JockUpdateOne) sqlSave(ctx context.Context) (_node *Jock, err error) {
	if err := juo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jock.Table, jock.Columns, sqlgraph.NewFieldSpec(jock.FieldID, field.TypeUUID))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Jock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jock.FieldID)
		for _, f := range fields {
			if !jock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.Name(); ok {
		_spec.SetField(jock.FieldName, field.TypeString, value)
	}
	if value, ok := juo.mutation.Content(); ok {
		_spec.SetField(jock.FieldContent, field.TypeString, value)
	}
	_node = &Jock{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
